@page "/userdatagrid"

@attribute [Authorize]

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject Services.LoginService LoginService

@implements IAsyncDisposable

<PageTitle>UserDataGrid</PageTitle>

@if (LoginService.Users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid @ref=grid
    Data="@data"
    TItem="IDictionary<string, object>"
    AllowPaging="true"
    PageSize="12"
    PagerHorizontalAlign="HorizontalAlign.Center"
    AllowFiltering="true"
    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
    AllowSorting="true"
    IsLoading=@isLoading
    Page="@ShowLoading"
    Filter="@ShowLoading"
    Sort="@ShowLoading"
    Group="@ShowLoading"
    GridLines="Radzen.DataGridGridLines.Vertical"
    ColumnWidth="256px"
    AllowColumnResize="true"
    @bind-Settings="@settings">

        <Columns>
            @try
            {
                foreach (var column in columns)
                {
                    <RadzenDataGridColumn @key=@column.Key Title="@column.Key" Type="column.Value"
                                          Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                        <Template>
                            @context[@column.Key]
                        </Template>
                    </RadzenDataGridColumn>
                }
            }
            catch (Exception e)
            {
                Log.Error($"Portal UserDataGrid.razor RadzenDataGridColumn() Exception: {e.Message}");
            }
        </Columns>

    </RadzenDataGrid>
}

@code {
    private RadzenDataGrid<IDictionary<string, object>> grid;

    private DataGridSettings settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private DataGridSettings _settings;

    private IDictionary<string, Type> columns { get; set; }

    private List<Dictionary<string, object>> cache = new List<Dictionary<string, object>>();

    private IEnumerable<IDictionary<string, object>> data;

    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        columns = new Dictionary<string, Type>()
        {
            { "ID", typeof(long) },
            { "Name", typeof(string)},
            { "X", typeof(string)},
            { "Y", typeof(string)}
        };

        await ShowLoading();

        LoginService.OnChangeUsers += () =>
        {
            Update();

            InvokeAsync(grid.Reload);
        };

        await LoginService.RequestUsers();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStateAsync();

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task ShowLoading()
    {
        isLoading = true;

        await Task.Yield();

        isLoading = false;
    }

    private async Task LoadStateAsync()
    {
        string settings = await sessionStorage.GetItemAsync<string>("UserDataGrid");

        if (!string.IsNullOrEmpty(settings))
        {
            _settings = Newtonsoft.Json.JsonConvert.DeserializeObject<DataGridSettings>(settings);
        }
    }

    private async Task SaveStateAsync()
    {
        await sessionStorage.SetItemAsync("UserDataGrid", settings);
    }

    private async void Update()
    {
        cache.Clear();

        List<User> SampleData = LoginService.Users.Select(user => new User {ID = user.ID, Name = user.Name, Password = user.Password}).Take(4096).ToList();

        foreach (User record in SampleData)
        {
            Dictionary<string, object> recordDictionary = new Dictionary<string, object>();

            recordDictionary.Add("ID", (long) record.ID);
            recordDictionary.Add("Name", record.Name);
            recordDictionary.Add("X", DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss.fffffff"));
            recordDictionary.Add("Y", DateTime.Now.AddSeconds(17).ToString("yyyy-MM-dd HH:mm:ss.fffffff"));

            cache.Add(recordDictionary);
        }

        data = cache;
    }

    public async ValueTask DisposeAsync()
    {
        LoginService.OnChangeUsers -= StateHasChanged;
    }
}

@page "/userdatagrid"

@attribute [Authorize]

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject Services.LoginService LoginService

@implements IAsyncDisposable

<PageTitle>UserDataGrid</PageTitle>

@using (var tables = new IMDB())
{
    try
    {
        if (tables.Users.Any())
        {
            <RadzenDataGrid @ref="grid"
                            IsLoading=@isLoading
                            Count="@count"
                            Data="@data"
                            LoadData="@LoadData"
                            AllowSorting="true"
                            AllowFiltering="true"
                            AllowPaging="true"
                            PageSize="12"
                            PagerHorizontalAlign="HorizontalAlign.Center"
                            ColumnWidth="200px"
                            FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            GridLines="Radzen.DataGridGridLines.Vertical"
                            AllowColumnResize="true"
                            @bind-Settings="@settings">

                <Columns>
                    <RadzenDataGridColumn Property="@nameof(User.ID)" Title="ID" Width="75px" TextAlign="TextAlign.Center" Filterable="false" Frozen="true" />
                    <RadzenDataGridColumn Property="@nameof(User.Name)" Title="Name" Width="150px" Frozen="true" />
                    <RadzenDataGridColumn Property="@nameof(User.Password)" Title="Password" Width="150px" />
                    <RadzenDataGridColumn Property="@nameof(User.Agency)" Title="Agency" Width="150px" />

                </Columns>

            </RadzenDataGrid>
        }
    }
    catch (Exception e)
    {
        Log.ForContext("Folder", "Portal").Error($"Portal UserDataGridPage.razor RadzenDataGrid() Exception: {e.Message}");
    }
}

@code {
    private RadzenDataGrid<User> grid;

    private int count;

    private IEnumerable<User> data;

    private bool isLoading = false;

    private async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        using (var tables = new IMDB())
        {
            var query = tables.Users.OrderBy(user => user.Name).ThenBy(user => user.Password).AsQueryable();

            if (!string.IsNullOrEmpty(args.Filter))
            {
                query = query.Where(args.Filter);
            }

            if (!string.IsNullOrEmpty(args.OrderBy))
            {
                query = query.OrderBy(args.OrderBy);
            }

            count = query.Count();

            data = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
        }

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        LoginService.OnChangeUsers += () =>
        {
            InvokeAsync(grid.Reload);
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await LoadStateAsync();

                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception e)
        {
            Log.ForContext("Folder", "Portal").Error($"Portal UserDataGridPage.razor OnAfterRenderAsync() Exception: {firstRender} {e.Message}");
        }
    }
    public async ValueTask DisposeAsync()
    {
        LoginService.OnChangeUsers -= StateHasChanged;
    }

    private DataGridSettings settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private DataGridSettings _settings;

    private async Task LoadStateAsync()
    {
        string settings = await sessionStorage.GetItemAsync<string>("UserDataGrid");

        if (!string.IsNullOrEmpty(settings))
        {
            _settings = Newtonsoft.Json.JsonConvert.DeserializeObject<DataGridSettings>(settings);
        }
    }
  
    private async Task SaveStateAsync()
    {
        await sessionStorage.SetItemAsync("UserDataGrid", settings);
    }
}

@page "/userhtml"

@attribute [Authorize]

@inject Services.LoginService LoginService

@implements IAsyncDisposable

<PageTitle>UserHTML</PageTitle>


@using (var tables = new IMDBX())
{
    try
    { 
        if (tables.Users.Any())
        {
            <table class="table">
                <thead>
                    <tr>
                        <th width="75">ID</th>
                        <th width="150">Name</th>
                        <th width="150">Password</th>
                        <th width="150">Agency</th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize Items="@tables.Users.OrderBy(user => user.Name).ThenBy(user => user.Password).AsQueryable().ToList()">
                            <tr>
                                <td>@context.ID</td>
                                <td>@context.Name</td>
                                <td>@context.Password</td>
                                <td>@context.Agency</td>
                            </tr>
                        </Virtualize>
                </tbody>
            </table>
        }
    }
    catch (Exception e)
    {
        Log.ForContext("Folder", "Portal").Error($"Portal UserHTMLPage.razor tables Exception: {e.Message}");
    }
}

@code {
    protected override async Task OnInitializedAsync()
    {
        LoginService.OnChangeUsers += () =>
        {
            InvokeAsync(StateHasChanged);
        };
    }

    public async ValueTask DisposeAsync()
    {
        LoginService.OnChangeUsers -= StateHasChanged;
    }
}

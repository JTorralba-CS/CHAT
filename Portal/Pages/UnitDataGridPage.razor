@page "/unitdatagrid"

@attribute [Authorize]

@implements IAsyncDisposable

@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@inject DBScopedService DBScopedService

<PageTitle>UnitDataGrid</PageTitle>

@try
{
    if (DBScopedService.Units != null && DBScopedService.Units.Any())
    {
        <RadzenDataGrid @ref="grid"
        IsLoading=@isLoading
        Count="@count"
        Data="@data"
        LoadData="@LoadData"
        AllowSorting="true"
        AllowFiltering="true"
        AllowPaging="true"
        PageSize="12"
        PagerHorizontalAlign="HorizontalAlign.Center"
        ColumnWidth="200px"
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        GridLines="Radzen.DataGridGridLines.Vertical"
        AllowColumnResize="true"
        @bind-Settings="@settings">

            <Columns>
                <RadzenDataGridColumn Property="@nameof(Unit.ID)" Title="ID" Width="75px" TextAlign="TextAlign.Center" Filterable="false" Frozen="true" />
                <RadzenDataGridColumn Property="@nameof(Unit.Agency)" Title="Agency" Width="150px" />
                <RadzenDataGridColumn Property="@nameof(Unit.Jurisdiction)" Title="Jurisdiction" Width="150px" />
                <RadzenDataGridColumn Property="@nameof(Unit.Name)" Title="Name" Width="150px" />
                <RadzenDataGridColumn Property="@nameof(Unit.Status)" Title="Status" Width="150px" />
                <RadzenDataGridColumn Property="@nameof(Unit.Location)" Title="Location" Width="150px" />
            </Columns>

        </RadzenDataGrid>
    }
}
catch (Exception e)
{
    Log.ForContext("Folder", "Portal").Error($"Portal UnitDataGridPage.razor RadzenDataGrid() Exception: {e.Message}");
}

@code {
    private RadzenDataGrid<Unit> grid;

    private int count;

    private IEnumerable<Unit> data;

    private bool isLoading = false;

    private async Task LoadData(LoadDataArgs args)
    {
        isLoading = true;

        await Task.Yield();

        var query = DBScopedService.Units.OrderBy(record => record.Agency).ThenBy(record => record.Jurisdiction).ThenBy(record => record.Name).ThenBy(record => record.Status).ThenBy(record => record.Location).AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        count = query.Count();

        data = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        while (DBScopedService.Units == null || !DBScopedService.Units.Any())
        {
        }

        DBScopedService.OnChangeTableUsers += async () =>
        {
            //TRACE
            // foreach (var record in DBScopedService.Units.OrderBy(X => X.ID))
            // {
            //     Log.ForContext("Folder", DBScopedService.ChatService.Connection.ID).Information($"{record}");
            // }

            try
            {
                await InvokeAsync(grid.Reload);
            }
            catch (Exception e)
            {
                Log.ForContext("Folder", "Portal").Error($"Portal UserDataGridPage.razor OnChangeTableUnits() Exception: {e.Message}");
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await LoadStateAsync();

                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception e)
        {
            Log.ForContext("Folder", "Portal").Error($"Portal UnitDataGridPage.razor OnAfterRenderAsync() Exception: {firstRender} {e.Message}");
        }
    }
    
    private DataGridSettings settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private DataGridSettings _settings;

    private async Task LoadStateAsync()
    {
        string settings = await sessionStorage.GetItemAsync<string>("UnitDataGrid");

        if (!string.IsNullOrEmpty(settings))
        {
            _settings = Newtonsoft.Json.JsonConvert.DeserializeObject<DataGridSettings>(settings);
        }
    }
  
    private async Task SaveStateAsync()
    {
        await sessionStorage.SetItemAsync("UnitDataGrid", settings);
    }

    public async ValueTask DisposeAsync()
    {
        DBScopedService.OnChangeTableUnits -= StateHasChanged;
    }
}

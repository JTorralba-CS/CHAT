@page "/data"

@attribute [Authorize]

@inject Services.LoginService LoginService

@implements IAsyncDisposable

<PageTitle>Data</PageTitle>

@if (LoginService.Users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <RadzenDataGrid
        @ref=grid
        Data="@data"
        TItem="IDictionary<string, object>"
        AllowPaging="true"
        PageSize="15"
        AllowFiltering="true"
        AllowSorting="true">
        
        <Columns>
            @foreach (var column in columns)
            {
                <RadzenDataGridColumn @key=@column.Key Title="@column.Key" Type="column.Value"
                Property="@PropertyAccess.GetDynamicPropertyExpression(column.Key, column.Value)">
                    <Template>
                        @context[@column.Key]
                    </Template>
                </RadzenDataGridColumn>
            }
        </Columns>

    </RadzenDataGrid>
}

@code {

    RadzenDataGrid<IDictionary<string, object>> grid;

    public IDictionary<string, Type> columns { get; set; }

    public IEnumerable<IDictionary<string, object>> data
    {
        get
        {
            return Enumerable.Range(0, LoginService.Users.Count()).Select(i =>
            {
                var row = new Dictionary<string, object>();

                row.Add("ID", LoginService.Users[i].ID);
                row.Add("Name", LoginService.Users[i].Name);

                return row;
            });
        }
    }

    protected override async Task OnInitializedAsync()
    {
        columns = new Dictionary<string, Type>()
        {
            { "ID", typeof(int) },
            { "Name", typeof(string)}
        };

        LoginService.OnChangeUsers += () =>
        {
            InvokeAsync(grid.Reload);
        };

        await LoginService.RequestUsers();
    }

    public async ValueTask DisposeAsync()
    {
        LoginService.OnChangeUsers -= StateHasChanged;
    }
}

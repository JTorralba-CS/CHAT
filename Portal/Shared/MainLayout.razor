@* OK *@

@inherits LayoutComponentBase

@inject AuthenticationStateProvider AuthenticationStateProvider

@inject DialogService DialogService

@inject NotificationService NotificationService

@inject Services.LoginService LoginService

@inject Services.TranscriptService TranscriptService

@implements IAsyncDisposable

<RadzenComponents />

<PageTitle>@title</PageTitle>

<RadzenLayout>
    <RadzenHeader>
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0">
            <RadzenSidebarToggle Click="@(() => sidebarExpanded = !sidebarExpanded)" />
            <RadzenLabel Text="@title" />
        </RadzenStack>
    </RadzenHeader>
    <RadzenSidebar @bind-Expanded="@sidebarExpanded">
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Home" Icon="home" Path="/"/>
            <AuthorizeView>
                <Authorized>
                    <RadzenPanelMenuItem Text="UserDataGrid" Icon="dns" Path="/userdatagrid" />
                    <RadzenPanelMenuItem Text="UserHTML" Icon="list" Path="/userhtml" />
                    <RadzenPanelMenuItem Text="UnitDataGrid" Icon="dns" Path="/unitdatagrid" />
                    <RadzenPanelMenuItem Text="UnitHTML" Icon="list" Path="/unithtml" />
                    <RadzenPanelMenuItem Text="Logout" Icon="lock" Path="/login" Click="@(args => DeAuthenticate(args))" />
                </Authorized>
                <NotAuthorized>
                    <RadzenPanelMenuItem Text="UserScoped" Icon="list" Path="/userscoped" />
                    <RadzenPanelMenuItem Text="UserSingleton" Icon="list" Path="/usersingleton" />
                    <RadzenPanelMenuItem Text="Login" Icon="lock" Path="/login" Click="@(() => sidebarExpanded = false)" />
                </NotAuthorized>
            </AuthorizeView>
        </RadzenPanelMenu>
    </RadzenSidebar>
    <RadzenBody>
        @Body
    </RadzenBody>
    <RadzenFooter Style="margin: 0px; padding: 0px;">
        <TerminalComponent />
    </RadzenFooter>
</RadzenLayout>

@code {

    static readonly IConfigurationRoot Configuration = new ConfigurationBuilder().AddJsonFile("appsettings.json").Build();

    string title = Configuration["Title"];

    bool sidebarExpanded = false;

    protected async override Task OnInitializedAsync()
    {
        LoginService.OnChangeDeAuthenticated += async () =>
        {
            if (!LoginService.Authenticated)
            {   
                await ((AuthenticationStateService)AuthenticationStateProvider).MarkUserAsLoggedOut();

                try
                {
                    Log.ForContext("Folder", "Portal").Information($"{LoginService.User.ID} {LoginService.User.Name} [successfully logged out]");
                }
                catch
                {
                }

                //NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "LOGOUT", Detail = "Successfully logged out." });
            }

            await InvokeAsync(StateHasChanged);
        };

        TranscriptService.OnNewNotification += async () =>
        {
            string message = string.Empty;

            if (TranscriptService.Notification is not null && TranscriptService.Notification != string.Empty)
            {
                message = TranscriptService.Notification;

                await TranscriptService.ClearNotification();

                await DialogService.Alert(message, $"\U000026D4 {DateTime.Now.ToString("yyyy-mm-dd HH:mm:ss")}", new AlertOptions() { OkButtonText = "OK", Style = "color: gray;", ShowClose = false });
            }
        };
    }

    private async Task DeAuthenticate(object args)
    {
        sidebarExpanded = false;
        await LoginService.DeAuthenticate();
    }
    
    public async ValueTask DisposeAsync()
    {
        await LoginService.DeAuthenticate();
    }
}
